openapi: "3.0.3"
info:
  version: 1.0.0
  title: The order service API

tags:
  - name: orders
    description: Operations about orders

paths:
  /orders:
    get:
      summary: Retrieve a list of orders for the current user
      operationId: getOrders
      tags:
        - orders
      parameters:
        - $ref: "#/components/parameters/tenantId"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/limit"
      responses:
        200:
          description: A list of orders.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderDTO"
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"
    post:
      summary: Create a new order
      operationId: createOrder
      tags:
        - orders
      parameters:
        - $ref: "#/components/parameters/tenantId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrderRequest"
      responses:
        201:
          description: Order created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderDTO"
          headers:
            Location:
              description: The location of the created order
              schema:
                type: string
                format: uri
        400:
          description: "Bad Request (e.g., item out of stock, invalid product)"
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"

  /orders/{orderId}:
    get:
      summary: Retrieve an order by ID
      operationId: getOrderById
      tags:
        - orders
      parameters:
        - $ref: "#/components/parameters/tenantId"
        - $ref: "#/components/parameters/orderId"
      responses:
        200:
          description: "Order found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderDTO"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
        404:
          description: "Not Found"
        500:
          description: "Internal Server Error"

  /orders/{orderId}/cancel:
    post:
      summary: Cancel an order
      operationId: cancelOrder
      tags:
        - orders
      parameters:
        - $ref: "#/components/parameters/tenantId"
        - $ref: "#/components/parameters/orderId"
      responses:
        200:
          description: "Order cancelled"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderDTO"
        400:
          description: "Bad Request (e.g., order cannot be cancelled)"
        401:
          description: "Unauthorized"
        404:
          description: "Not Found"
        500:
          description: "Internal Server Error"

security:
  - BearerAuth: [ ]

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    CreateOrderRequest:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/CreateOrderItemRequest"
      required:
        - items

    CreateOrderItemRequest:
      type: object
      properties:
        productId:
          type: string
          description: "ID of the product."
        quantity:
          type: integer
          format: int32
          description: "Quantity of the product."
          minimum: 1
      required:
        - productId
        - quantity

    OrderDTO:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        userId:
          type: string
          readOnly: true
        items:
          type: array
          items:
            $ref: "#/components/schemas/OrderItemDTO"
          readOnly: true
        totalPrice:
          type: number
          format: float
          readOnly: true
        status:
          type: string
          format: open-enumeration
          description: |
            Status of the order
            * CREATED
            * PENDING_PAYMENT
            * PAID
            * SHIPPED
            * DELIVERED
            * CANCELLED
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true

    OrderItemDTO:
      type: object
      properties:
        productId:
          type: string
          readOnly: true
        productName:
          type: string
          readOnly: true
        quantity:
          type: integer
          format: int32
          readOnly: true
        price:
          type: number
          format: float
          description: "Price of the item at the time of purchase."
          readOnly: true

    Id:
      type: string
      description: "Unique identifier for the resource (UUID)."
      example: "f7b3f1b1-5b7b-4b3b-8b3b-7b3b1f7b3b1f"

  parameters:
    tenantId:
      name: tenantId
      in: header
      description: "The ID of the tenant."
      required: true
      schema:
        type: string
        example: "shopbee"
    offset:
      name: offset
      in: query
      description: "The number of items to skip."
      schema:
        type: integer
        format: int32
        default: 0
        minimum: 0
    limit:
      name: limit
      in: query
      description: "The number of items to return."
      schema:
        type: integer
        format: int32
        default: 20
        minimum: 1
        maximum: 100
    orderId:
      name: orderId
      in: path
      description: "ID of the order."
      required: true
      schema:
        $ref: "#/components/schemas/Id"
